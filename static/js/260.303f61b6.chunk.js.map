{"version":3,"file":"static/js/260.303f61b6.chunk.js","mappings":"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","sources":["components/Form/AuthButton/AuthButton.styled.jsx","components/Form/AuthButton/AuthButton.jsx","components/Form/AuthLink/AuthLink.styled.jsx","components/Form/AuthLink/AuthLink.jsx","components/Form/CustomInput/CustomInput.styled.jsx","components/Form/StatusIcon/StatusIcon.styled.jsx","components/Form/StatusIcon/StatusIcon.jsx","components/Form/VisiblePasswordIcon/VisiblePasswordIcon.styled.jsx","components/Form/VisiblePasswordIcon/VisiblePasswordIcon.jsx","components/Form/CustomInput/CustomInput.jsx","components/Form/Form/Form.styled.jsx","components/Form/Form/Form.jsx","components/PhoneImage/PhoneImage.styled.jsx","components/PhoneImage/PhoneImage.jsx","components/WelcomePage/WelcomePage.styled.jsx","components/GrittingTitle/GrittingTitle.styled.jsx","components/GrittingTitle/GritingTitle.jsx","components/WelcomePage/WelcomPage.jsx","helpers/form/initialValues.js","helpers/form/validationSchema.js","components/Form/LoginForm/LoginForm.styled.jsx","components/Form/LoginForm/LoginForm.jsx","pages/Login.jsx"],"sourcesContent":["import styled from \"styled-components\";\nimport { colors, textSize } from \"../../../css/variables\";\n\nexport const Button = styled.button`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 30px;\n    border: 1px solid ${colors.white};\n    padding: ${(props) => props.$register ? '12px 29px' : '12px 45px'};\n    font-family: 'Gilroy-Bold';\n    font-size: ${textSize.xxs};\n    line-height: 1.28;\n    letter-spacing: 0.02em;\n    background-color: ${colors.white};\n    color: ${colors.darkGrey};\n    transition: background-color 250ms ease-in, color 250ms ease-in, border 250ms ease-in;\n\n    @media screen and (min-width: 768px) {\n        font-size: ${textSize.m};\n        line-height: 1;\n        padding: 16px 54px;\n    }\n\n    &:hover {\n        background-color: transparent;\n        color: ${colors.white};\n        border: 1px solid ${colors.transparentWhite};\n    }\n`","import PropTypes from 'prop-types';\nimport { Button } from \"./AuthButton.styled\";\n\nconst AuthButton = ({ text, ...props }) => {\n    return (\n        <Button type=\"submit\" {...props}>{text}</Button>\n   )\n}\n\nAuthButton.propTypes = {\n    text: PropTypes.string.isRequired,\n}\n\nexport default AuthButton;","import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { colors, textSize } from '../../../css/variables';\n\nexport const StyledLink = styled(Link)`\n  line-height: 1.16;\n  letter-spacing: -0.02em;\n  text-decoration: underline;\n  color: ${colors.lightGrey};\n  transition: color 250ms ease-in;\n\n  &:hover {\n    color: ${colors.white};\n  }\n\n  @media screen and (min-width: 768px) {\n    font-size: ${textSize.xxs};\n    line-height: 1.28;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { StyledLink } from \"./AuthLink.styled\";\n\nconst AuthLink = ({page, text}) => {\n    return (\n        <StyledLink to={`/${page}`}>{text}</StyledLink>\n    )\n}\n\nAuthLink.propTypes = {\n    page: PropTypes.string.isRequired,\n    text: PropTypes.string.isRequired,\n}\n\nexport default AuthLink;","import styled from 'styled-components';\nimport { colors } from '../../../css/variables';\n\nexport const InputWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 14px 14px;\n  border-radius: 12px;\n  background-color: ${colors.mediumGrey};\n\n  ${props =>\n    props.$error &&\n    `\n    border: 1px solid ${colors.red};\n   `}\n\n  ${props =>\n    props.$valid &&\n    `\n    border: 1px solid ${colors.green};\n   `}\n\n   label {\n    margin-right: 10px;\n    line-height: 1.3;\n    letter-spacing: -0.02em;\n    color: ${colors.lightGrey};\n\n      @media screen and (min-width: 768px) {\n    font-size: 14px;\n  }\n  }\n\n    @media screen and (min-width: 768px){\n    padding: 14px 16px;\n  }\n`;\n\nexport const Input = styled.input`\n  line-height: 1.3;\n  letter-spacing: -0.02em;\n  width: 100%;\n\n  &::placeholder {\n    color: ${colors.white};\n    line-height: 1.3;\n    letter-spacing: -0.02em;\n  }\n\n  @media screen and (min-width: 768px) {\n    font-size: 14px;\n  }\n`;\n\nexport const IconWrapper = styled.div`\n  display: flex;\n  gap: 8px;\n`\n\nexport const ErrorMessage = styled.p`\n  color: ${colors.red};\n`\n\nexport const ValidMessage = styled.p`\n  color: ${colors.green};\n`\n","import styled from 'styled-components';\n\nexport const Svg = styled.svg`\n  width: 18px;\n  height: 18px;\n\n  @media screen and (min-width: 768px) {\n    width: 20px;\n    height: 20px;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { Svg } from './StatusIcon.styled';\n\nconst StatusIcon = ({ isError, isValid }) => {\n  return (\n    <>\n      {isError && (\n        <Svg>\n          <use xlinkHref=\"./svg/svgSprite.svg#icon-error\"></use>\n        </Svg>\n      )}\n      {isValid && (\n        <Svg>\n          <use xlinkHref=\"./svg/svgSprite.svg#icon-done\"></use>\n        </Svg>\n      )}\n    </>\n  );\n};\n\nStatusIcon.propTypes = {\n  isError: PropTypes.bool,\n  isValid: PropTypes.bool,\n};\n\nexport default StatusIcon;\n","import styled from 'styled-components';\n\nexport const Button = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-left: auto;\n`;\n\nexport const Svg = styled.svg`\n  width: 18px;\n  height: 18px;\n\n  @media screen and (min-width: 768px) {\n    width: 20px;\n    height: 20px;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { Button, Svg } from \"./VisiblePasswordIcon.styled\";\n\nconst VisiblePasswordIcon = ({ visiblePassword, onClick }) => {\n    return (\n    <Button type='button' onClick={onClick}>\n        {visiblePassword ? (\n            <Svg>\n                <use xlinkHref=\"./svg/svgSprite.svg#icon-eye\"></use>\n              </Svg>\n            ) : (\n              <Svg>\n                <use xlinkHref=\"./svg/svgSprite.svg#icon-eye-off\"></use>\n              </Svg>\n       )}\n        </Button>\n    )\n}\n\nVisiblePasswordIcon.propTypes = {\n    visiblePassword: PropTypes.bool.isRequired,\n    onClick: PropTypes.func.isRequired,\n}\n\nexport default VisiblePasswordIcon;","import { useField } from 'formik';\nimport PropTypes from 'prop-types';\nimport {\n  ErrorMessage,\n  IconWrapper,\n  Input,\n  InputWrapper,\n  ValidMessage,\n} from './CustomInput.styled';\nimport { useState } from 'react';\nimport StatusIcon from '../StatusIcon/StatusIcon';\nimport VisiblePasswordIcon from '../VisiblePasswordIcon/VisiblePasswordIcon';\n\nconst CustomInput = ({ label, ...props }) => {\n  const [field, meta] = useField(props);\n  const [visiblePassword, setVisiblePassword] = useState(false);\n\n  const isError = meta.error && meta.touched;\n  const isValid = !!(!meta.error && meta.value.trim());\n  const isPasswordInput = field.name === 'password';\n\n  const togglePasswordVisibility = () => {\n    setVisiblePassword(!visiblePassword);\n  };\n\n  return (\n    <>\n      <InputWrapper $error={isError} $valid={isValid}>\n        <label>{label}</label>\n        <Input\n          {...field}\n          {...props}\n          type={\n            isPasswordInput\n              ? visiblePassword\n                ? 'text'\n                : 'password'\n              : props.type\n          }\n          autoComplete=\"off\"\n        />\n        <IconWrapper>\n          {isPasswordInput && (\n            <VisiblePasswordIcon\n              visiblePassword={visiblePassword}\n              onClick={togglePasswordVisibility}\n            />\n          )}\n          <StatusIcon isError={isError} isValid={isValid} />\n        </IconWrapper>\n      </InputWrapper>\n      {isError && <ErrorMessage>{meta.error}</ErrorMessage>}\n      {isValid && isPasswordInput && (\n        <ValidMessage>Password is secure</ValidMessage>\n      )}\n    </>\n  );\n};\n\nCustomInput.propTypes = {\n  label: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n};\n\nexport default CustomInput;\n","import { Form } from 'formik';\nimport styled from 'styled-components';\n\nexport const StyledForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n\n  @media screen and (min-width: 768px) {\n    width: 472px;\n  }\n`;\n","import { Formik } from 'formik';\nimport PropTypes from 'prop-types';\nimport { StyledForm } from './Form.styled';\n\nconst FormBox = ({ initialValues, validationSchema, onSubmit, children }) => {\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={validationSchema}\n      onSubmit={onSubmit}\n    >\n      {() => <StyledForm >{children}</StyledForm>}\n    </Formik>\n  );\n};\n\nFormBox.propTypes = {\n    initialValues: PropTypes.object.isRequired,\n    validationSchema: PropTypes.object.isRequired,\n    onSubmit: PropTypes.func.isRequired,\n    children: PropTypes.node.isRequired,\n}\n\nexport default FormBox;\n","import styled from 'styled-components';\nimport { wrapperMixin } from '../../css/variables';\n\nexport const Wrapper = styled.div`\n  ${wrapperMixin}\n  justify-content: center;\n  padding: 20px 40px 0;\n\n  @media screen and (min-width: 1440px) {\n    padding: 80px 97px 0;\n  }\n\n  @media screen and (min-width: 768px) and (max-width: 1439px) {\n    display: none;\n  }\n`;\n\nexport const Image = styled.img`\n  width: 255px;\n  height: auto;\n\n  @media screen and (min-width: 1440px) {\n    width: 405px;\n  }\n`;\n","import { useMediaQuery } from 'react-responsive';\nimport {Image, Wrapper} from './PhoneImage.styled';\nimport mobileImage from '../../assets/images/iPhoneMobile.png';\nimport desktopImage from '../../assets/images/iPhoneDesktop.png';\n\nconst PhoneImage = () => {\n    const isMobile = useMediaQuery({ maxWidth: 767 })\n    \n    return (\n        <Wrapper>\n            <Image\n                src={isMobile ? mobileImage : desktopImage}\n                alt='iPhone image'\n                loading='lazy'\n            />\n        </Wrapper>\n    )\n}\n\nexport default PhoneImage;","import styled from 'styled-components';\nimport { wrapperMixin } from '../../css/variables';\n\nexport const Wrapper = styled.div`\n  ${wrapperMixin}\n  flex-direction: column;\n  padding: 20px 20px 40px;\n\n  @media screen and (min-width: 768px) {\n    padding: 40px 64px 214px;\n  }\n\n  @media screen and (min-width: 1440px) {\n    padding: 40px 64px;\n  }\n`;\n","import styled from \"styled-components\";\nimport { colors } from \"../../css/variables\";\n\nexport const Title = styled.h1`\n    font-family: 'Gilroy-Bold';\n    font-size: 32px;\n    line-height: 1;\n    letter-spacing: 0.02em;\n    margin-top: 40px;\n    margin-bottom: 20px;\n\n    span {\n        color: ${colors.lightGrey50};\n    }\n\n    @media screen and (min-width: 768px) {\n        margin-top: 157px;\n    margin-bottom: 40px;\n        font-size: 64px;\n        line-height: 0.9;\n        width: 444px;\n    }\n\n    @media screen and (min-width: 1440px) {\n         margin-top: 107px;\n    }\n`","import { Title } from \"./GrittingTitle.styled\";\n\nconst GrittingTitle = () => {\n    return (\n        <Title>Expand your mind, reading <span>a book</span></Title>\n    )\n}\n\nexport default GrittingTitle;","import { Wrapper } from './WelcomePage.styled';\nimport PropTypes from 'prop-types';\nimport Logo from '../Logo/Logo';\nimport GrittingTitle from '../GrittingTitle/GritingTitle';\n// import RegisterForm from '../Form/RegisterForm/RegisterForm';\n\nconst WelcomPage = ({children}) => {\n  return (\n    \n      <Wrapper>\n        <Logo $hide />\n        <GrittingTitle />\n        {children}\n      </Wrapper>\n    \n  );\n};\n\nWelcomPage.propTypes = {\n    children: PropTypes.node\n}\n\nexport default WelcomPage;\n","export const initialRegisterValues = {\n    name: '',\n    email: '',\n    password: '',\n}\n\nexport const initialLoginValues = {\n    email: '',\n    password: '',\n}","import {object, string} from 'yup';\n\nexport const validationRegisterSchema = object().shape({\n    name: string().required('Name is requared'),\n    email: string().matches(/^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/, 'Invalid email format').required('Email is required'),\n    password: string().min(7, 'Password must be at least 7 characters long').required('Password is required'),\n})\n\nexport const validationLoginSchema = object().shape({\n    email: string().matches(/^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/, 'Invalid email format').required('Email is required'),\n    password: string().min(7, 'Password must be at least 7 characters long').required('Password is required'),\n})\n","import styled from 'styled-components';\nimport {\n  authButtonWrapperMixin,\n  inputWrapperMixin,\n} from '../../../css/variables';\n\nexport const InputWrapper = styled.div`\n  ${inputWrapperMixin}\n  margin-bottom: 72px;\n\n  @media screen and (min-width: 768px) {\n    gap: 14px;\n    margin-bottom: 146px;\n  }\n`;\n\nexport const AuthButtonsWrapper = styled.div`\n  ${authButtonWrapperMixin}\n`;\n","import CustomInput from '../CustomInput/CustomInput';\nimport { validationLoginSchema } from '../../../helpers/form/validationSchema';\nimport { initialLoginValues } from '../../../helpers/form/initialValues';\nimport AuthLink from '../AuthLink/AuthLink';\nimport FormBox from '../Form/Form';\nimport { AuthButtonsWrapper, InputWrapper } from './LoginForm.styled';\nimport AuthButton from '../AuthButton/AuthButton';\n\nconst LoginForm = () => {\n  const onSubmit = (values, actions) => {\n    console.log('onSubmit  values', values);\n    actions.resetForm();\n  };\n\n  return (\n    <FormBox\n      initialValues={initialLoginValues}\n      validationSchema={validationLoginSchema}\n      onSubmit={onSubmit}\n    >\n      <InputWrapper>\n        <CustomInput\n          label=\"Email:\"\n          name=\"email\"\n          type=\"email\"\n          placeholder=\"Your@email.com\"\n        />\n        <CustomInput\n          label=\"Password:\"\n          name=\"password\"\n          type=\"password\"\n          placeholder=\"Yourpasswordhere\"\n        />\n      </InputWrapper>\n      <AuthButtonsWrapper>\n        <AuthButton type=\"submit\" text='Log in'/>\n        <AuthLink page=\"register\" text=\"Don’t have an account? \" />\n      </AuthButtonsWrapper>\n    </FormBox>\n  );\n};\n\nexport default LoginForm;\n","import PhoneImage from '../components/PhoneImage/PhoneImage';\nimport Container from '../components/Container/Container';\nimport WelcomPage from '../components/WelcomePage/WelcomPage';\nimport LoginForm from '../components/Form/LoginForm/LoginForm';\n\nconst Login = () => {\n  return (\n    <Container>\n      <WelcomPage>\n        <LoginForm />\n      </WelcomPage>\n      <PhoneImage />\n    </Container>\n  );\n};\n\nexport default Login;\n"],"names":["Button","styled","button","_templateObject","_taggedTemplateLiteral","colors","white","props","$register","textSize","xxs","darkGrey","m","transparentWhite","_ref","text","_jsx","type","children","StyledLink","Link","lightGrey","page","to","concat","InputWrapper","div","mediumGrey","$error","red","$valid","green","Input","input","_templateObject2","IconWrapper","_templateObject3","ErrorMessage","p","_templateObject4","ValidMessage","_templateObject5","Svg","svg","isError","isValid","_jsxs","_Fragment","xlinkHref","visiblePassword","onClick","label","field","meta","useField","setVisiblePassword","useState","error","touched","value","trim","isPasswordInput","name","autoComplete","VisiblePasswordIcon","togglePasswordVisibility","StatusIcon","StyledForm","Form","initialValues","validationSchema","onSubmit","Formik","Wrapper","wrapperMixin","Image","img","PhoneImage","isMobile","useMediaQuery","maxWidth","src","mobileImage","desktopImage","alt","loading","Title","h1","lightGrey50","GrittingTitle","Logo","$hide","initialRegisterValues","email","password","initialLoginValues","validationRegisterSchema","object","shape","string","required","matches","min","validationLoginSchema","inputWrapperMixin","AuthButtonsWrapper","authButtonWrapperMixin","LoginForm","FormBox","values","actions","console","log","resetForm","CustomInput","placeholder","AuthButton","AuthLink","Login","Container","WelcomPage"],"sourceRoot":""}